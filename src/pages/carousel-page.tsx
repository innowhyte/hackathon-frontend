import { useNavigate, useParams } from 'react-router'
import { useTitle } from '../hooks/use-title'
import { useContext, useEffect } from 'react'
import { AppContext } from '../context/app-context'
import Header from '../components/header'
import { Button } from '../components/ui/button'
import AIHelpDialog from '../components/modals/ai-help-dialog'

export default function CarouselPage() {
  useTitle('Carousel')
  const context = useContext(AppContext)
  const navigate = useNavigate()
  const { day, gradeId } = useParams()

  if (!context) {
    return <div>Loading...</div>
  }

  const {
    gradeActivitiesSelections,
    hasGenerated,
    setHasGenerated,
    carouselIndex,
    setCarouselIndex,
    cardPrompts,
    setCardPrompts,
    cardResponses,
    setCardResponses,
  } = context

  // Generate activity instructions based on selections
  const generateActivityInstructions = () => {
    const selections = gradeActivitiesSelections[day as string]?.[gradeId as string]
    if (!selections) return []

    const mode = selections.mode
    const modalities = selections.modalities || []

    // Base activities that can be customized based on mode and modalities
    const baseActivities = [
      {
        title: 'Activity 1: Interactive Discussion',
        description:
          'Facilitate a whole-class discussion about the topic. Encourage students to share their thoughts and ask questions.',
      },
      {
        title: 'Activity 2: Hands-on Practice',
        description:
          'Students work on practical exercises related to the topic. Provide individual guidance and support as needed.',
      },
      {
        title: 'Activity 3: Group Collaboration',
        description:
          'Students work in small groups to complete a collaborative task. Monitor group dynamics and provide feedback.',
      },
    ]

    // Customize activities based on mode and modalities
    const customizedActivities = baseActivities.map((activity, index) => {
      let title = activity.title
      let description = activity.description

      // Customize based on mode
      if (mode === 'individual') {
        title = `Activity ${index + 1}: Individual Work`
        description =
          'Students work independently on tasks related to the topic. Provide individual support and guidance.'
      } else if (mode === 'group') {
        title = `Activity ${index + 1}: Group Work`
        description = 'Students collaborate in groups to complete tasks. Encourage teamwork and peer learning.'
      } else if (mode === 'whole_class') {
        title = `Activity ${index + 1}: Whole Class Activity`
        description =
          'Engage the entire class in a structured activity. Maintain focus and participation from all students.'
      }

      // Customize based on modalities
      if (modalities.includes('visual')) {
        description += ' Include visual aids, diagrams, or charts to support learning.'
      }
      if (modalities.includes('auditory')) {
        description += ' Incorporate verbal explanations, discussions, or audio materials.'
      }
      if (modalities.includes('kinesthetic')) {
        description += ' Include hands-on activities, movement, or physical engagement.'
      }
      if (modalities.includes('reading')) {
        description += ' Provide reading materials or text-based activities.'
      }
      if (modalities.includes('writing')) {
        description += ' Include writing tasks, note-taking, or creative writing activities.'
      }

      return { title, description }
    })

    return customizedActivities
  }

  const activityInstructions = generateActivityInstructions()

  // Initialize hasGenerated if not already set
  useEffect(() => {
    if (!hasGenerated && activityInstructions.length > 0) {
      setHasGenerated(true)
      setCarouselIndex(0)
      // Initialize prompts and responses arrays
      setCardPrompts(new Array(activityInstructions.length).fill(''))
      setCardResponses(new Array(activityInstructions.length).fill(''))
    }
  }, [hasGenerated, activityInstructions.length, setHasGenerated, setCarouselIndex, setCardPrompts, setCardResponses])

  const handleAskQuestion = () => {
    const newResponses = [...cardResponses]
    newResponses[carouselIndex] =
      `Response to: "${cardPrompts[carouselIndex]}" (This is a placeholder response. In a real implementation, this would be generated by an AI service based on the prompt and activity context.)`
    setCardResponses(newResponses)
  }

  const handlePromptChange = (value: string) => {
    const newPrompts = [...cardPrompts]
    newPrompts[carouselIndex] = value
    setCardPrompts(newPrompts)
  }

  const handlePrevious = () => {
    setCarouselIndex((carouselIndex - 1 + activityInstructions.length) % activityInstructions.length)
  }

  const handleNext = () => {
    setCarouselIndex((carouselIndex + 1) % activityInstructions.length)
  }

  if (activityInstructions.length === 0) {
    return (
      <div className="bg-background flex min-h-screen items-center justify-center">
        <div className="text-center">
          <h2 className="mb-2 text-xl font-medium text-neutral-800">No Activities Available</h2>
          <p className="mb-4 text-neutral-600">Please configure grade activities first.</p>
          <Button
            onClick={() => navigate(`/day/${day}/grade/${gradeId}/activities`)}
            className="rounded-lg px-6 py-2 transition-colors"
          >
            Go Back to Activities
          </Button>
        </div>
      </div>
    )
  }

  return (
    <div className="bg-background min-h-screen">
      <Header
        title={`Grade ${gradeId} Activities`}
        onBack={() => navigate(`/day/${day}/grade/${gradeId}/activities`)}
      />

      <div className="flex items-center justify-center p-6">
        <div className="w-full max-w-2xl">
          {hasGenerated && (
            <div className="flex flex-col items-center">
              <div className="relative w-full">
                <div className="mb-6 flex min-h-[180px] flex-col items-center rounded-2xl bg-white/90 p-6 shadow-lg">
                  <h4 className="mb-2 text-center text-lg font-semibold text-neutral-800">
                    {activityInstructions[carouselIndex].title}
                  </h4>
                  <p className="text-center text-base text-neutral-700">
                    {activityInstructions[carouselIndex].description}
                  </p>
                </div>
                {/* Carousel Navigation */}
                <div className="flex w-full items-center justify-between px-4">
                  <Button
                    onClick={handlePrevious}
                    variant="outline"
                    size="icon"
                    className="rounded-full bg-neutral-200 p-2 hover:bg-neutral-300"
                    aria-label="Previous"
                  >
                    <svg className="h-5 w-5 text-neutral-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                    </svg>
                  </Button>
                  <span className="text-sm text-neutral-500">
                    {carouselIndex + 1} / {activityInstructions.length}
                  </span>
                  <Button
                    onClick={handleNext}
                    variant="outline"
                    size="icon"
                    className="rounded-full bg-neutral-200 p-2 hover:bg-neutral-300"
                    aria-label="Next"
                  >
                    <svg className="h-5 w-5 text-neutral-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                    </svg>
                  </Button>
                </div>
              </div>
              {/* Prompt input and response */}
              <div className="mt-4 w-full">
                <label className="mb-2 block text-sm font-medium text-neutral-700">
                  Ask a question or modify the activity:
                </label>
                <div className="mb-2 flex gap-2">
                  <input
                    type="text"
                    value={cardPrompts[carouselIndex]}
                    onChange={e => handlePromptChange(e.target.value)}
                    className="focus:ring-primary-40 flex-1 rounded-lg border border-neutral-300 p-2 focus:ring-2 focus:outline-none"
                    placeholder="e.g., How can I make this more engaging?"
                  />
                  <Button
                    onClick={handleAskQuestion}
                    variant="secondary"
                    size="sm"
                    className="rounded-lg px-4 py-2 transition-all"
                    disabled={!cardPrompts[carouselIndex].trim()}
                  >
                    Ask
                  </Button>
                </div>
                {cardResponses[carouselIndex] && (
                  <div className="bg-primary-90 text-neutral-10 mt-2 rounded-lg p-3 text-sm">
                    {cardResponses[carouselIndex]}
                  </div>
                )}
              </div>
            </div>
          )}
        </div>
      </div>
      <AIHelpDialog />
    </div>
  )
}
