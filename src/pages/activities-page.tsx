import { useNavigate, useParams, useSearchParams } from 'react-router'
import { useTitle } from '../hooks/use-title'
import { useEffect, useState } from 'react'
import Header from '../components/header'
import { Button } from '../components/ui/button'
import AIHelpDialog from '../components/modals/ai-help-dialog'
import { useGradeActivitiesGeneration } from '../hooks/use-grade-activities'

const GRADE_ACTIVITIES_SELECTIONS_KEY = 'gradeActivitiesSelections'

export default function Activities() {
  const navigate = useNavigate()
  const { day, gradeId } = useParams()
  const [searchParams] = useSearchParams()
  const topicId = searchParams.get('topicId')
  useTitle(`Grade ${gradeId} | Day ${day} | Activities`)

  // Generate a thread_id for this session
  const [threadId] = useState(() => crypto.randomUUID())

  // Local state replacing context, with localStorage persistence
  const [gradeActivitiesSelections, setGradeActivitiesSelections] = useState<Record<string, Record<string, any>>>({})
  const [selectionsLoaded, setSelectionsLoaded] = useState(false)
  const [carouselIndex, setCarouselIndex] = useState(0)
  const [cardPrompts, setCardPrompts] = useState<string[]>([])
  const [cardResponses, setCardResponses] = useState<string[]>([])

  // Load from localStorage on mount
  useEffect(() => {
    try {
      const stored = localStorage.getItem(GRADE_ACTIVITIES_SELECTIONS_KEY)
      if (stored) {
        setGradeActivitiesSelections(JSON.parse(stored))
      }
    } finally {
      setSelectionsLoaded(true)
    }
  }, [])

  // Persist gradeActivitiesSelections to localStorage on change
  useEffect(() => {
    if (selectionsLoaded) {
      localStorage.setItem(GRADE_ACTIVITIES_SELECTIONS_KEY, JSON.stringify(gradeActivitiesSelections))
    }
  }, [gradeActivitiesSelections, selectionsLoaded])

  // Re-sync gradeActivitiesSelections if returning from config page
  useEffect(() => {
    const handleStorage = () => {
      try {
        const stored = localStorage.getItem(GRADE_ACTIVITIES_SELECTIONS_KEY)
        if (stored) {
          setGradeActivitiesSelections(JSON.parse(stored))
        }
      } catch {}
    }
    window.addEventListener('storage', handleStorage)
    return () => window.removeEventListener('storage', handleStorage)
  }, [])

  // Get selections for this day/grade
  const selections = gradeActivitiesSelections[day as string]?.[gradeId as string]
  const mode = selections?.mode
  const modalities = selections?.modalities || []

  // Map mode to API string
  const modeLabelMap: Record<string, string> = {
    independent: 'Work independently',
    peer: 'Work with each other',
    teacher: 'Work with the teacher',
    individual: 'Work independently',
    group: 'Work with each other',
    whole_class: 'Work with the teacher',
  }
  const modes_of_interaction = modeLabelMap[mode] || mode || ''

  // Map modalities to API values (capitalize first letter, handle paper/slate)
  const modalityLabelMap: Record<string, string> = {
    visual: 'Visual',
    auditory: 'Auditory',
    kinesthetic: 'Activity based',
    paper: 'Paper/slate-based',
    reading: 'Reading',
    writing: 'Writing',
  }
  const modalitiesForApi = (modalities || []).map((m: string) => modalityLabelMap[m] || m)

  // Activities generation hook
  const { isGenerating, progress, activities, error, generateActivities } = useGradeActivitiesGeneration()

  // Trigger generation on mount if not already generated
  useEffect(() => {
    if (
      selectionsLoaded &&
      !activities.length &&
      day &&
      gradeId &&
      topicId &&
      modes_of_interaction &&
      modalitiesForApi.length > 0
    ) {
      generateActivities({
        day_id: day,
        grade_id: gradeId,
        topic_id: topicId,
        thread_id: threadId,
        modes_of_interaction,
        modalities: modalitiesForApi,
        onActivitiesGenerated: acts => {
          setCarouselIndex(0)
          setCardPrompts(new Array(acts.length).fill(''))
          setCardResponses(new Array(acts.length).fill(''))
        },
      })
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [selectionsLoaded, day, gradeId, topicId, modes_of_interaction, modalitiesForApi.join(','), activities.length])

  const handleAskQuestion = () => {
    const newResponses = [...cardResponses]
    newResponses[carouselIndex] =
      `Response to: "${cardPrompts[carouselIndex]}" (This is a placeholder response. In a real implementation, this would be generated by an AI service based on the prompt and activity context.)`
    setCardResponses(newResponses)
  }

  const handlePromptChange = (value: string) => {
    const newPrompts = [...cardPrompts]
    newPrompts[carouselIndex] = value
    setCardPrompts(newPrompts)
  }

  const handlePrevious = () => {
    setCarouselIndex((carouselIndex - 1 + activities.length) % activities.length)
  }

  const handleNext = () => {
    setCarouselIndex((carouselIndex + 1) % activities.length)
  }

  if (!selections || !modes_of_interaction || modalitiesForApi.length === 0) {
    return (
      <div className="bg-background flex min-h-screen items-center justify-center">
        <div className="text-center">
          <h2 className="mb-2 text-xl font-medium text-neutral-800">No Activities Available</h2>
          <p className="mb-4 text-neutral-600">Please configure grade activities first.</p>
          <Button
            onClick={() => navigate(`/day/${day}/grade/${gradeId}/generate-activities?topicId=${topicId || ''}`)}
            className="rounded-lg px-6 py-2 transition-colors"
          >
            Go Back to Activities
          </Button>
        </div>
      </div>
    )
  }

  return (
    <div className="bg-background min-h-screen">
      <Header
        title={`Grade ${gradeId} Activities`}
        onBack={() => navigate(`/day/${day}/grade/${gradeId}/generate-activities?topicId=${topicId || ''}`)}
      />

      <div className="flex items-center justify-center p-6">
        <div className="w-full max-w-2xl">
          {isGenerating && (
            <div className="flex flex-col items-center">
              <div className="mb-4 w-full rounded-xl bg-white/90 p-6 text-center shadow-lg">
                <h4 className="mb-2 text-lg font-semibold text-neutral-800">Generating Activities...</h4>
                <p className="text-base text-neutral-700">
                  {progress || 'Please wait while we generate your activities.'}
                </p>
              </div>
            </div>
          )}
          {error && (
            <div className="mb-4 w-full rounded-xl bg-red-100 p-4 text-center text-red-700 shadow">{error}</div>
          )}
          {!isGenerating && activities.length > 0 && (
            <div className="flex flex-col items-center">
              <div className="relative w-full">
                <div className="mb-6 flex min-h-[180px] flex-col items-center rounded-2xl bg-white/90 p-6 shadow-lg">
                  <h4 className="mb-2 text-center text-lg font-semibold text-neutral-800">
                    {activities[carouselIndex]?.name}
                  </h4>
                  <p className="mb-2 text-center text-base text-neutral-700">
                    {activities[carouselIndex]?.description}
                  </p>
                  {activities[carouselIndex]?.purpose && (
                    <div className="mb-2 text-center text-sm text-neutral-600">
                      <span className="font-medium">Purpose:</span> {activities[carouselIndex].purpose}
                    </div>
                  )}
                  {activities[carouselIndex]?.materials_required &&
                    activities[carouselIndex].materials_required.length > 0 && (
                      <div className="mt-2 text-center text-sm text-neutral-600">
                        <span className="font-medium">Materials Required:</span>{' '}
                        {activities[carouselIndex].materials_required.join(', ')}
                      </div>
                    )}
                </div>
                {/* Carousel Navigation */}
                <div className="flex w-full items-center justify-between px-4">
                  <Button
                    onClick={handlePrevious}
                    variant="outline"
                    size="icon"
                    className="rounded-full bg-neutral-200 p-2 hover:bg-neutral-300"
                    aria-label="Previous"
                  >
                    <svg className="h-5 w-5 text-neutral-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                    </svg>
                  </Button>
                  <span className="text-sm text-neutral-500">
                    {carouselIndex + 1} / {activities.length}
                  </span>
                  <Button
                    onClick={handleNext}
                    variant="outline"
                    size="icon"
                    className="rounded-full bg-neutral-200 p-2 hover:bg-neutral-300"
                    aria-label="Next"
                  >
                    <svg className="h-5 w-5 text-neutral-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                    </svg>
                  </Button>
                </div>
              </div>
              {/* Prompt input and response */}
              <div className="mt-4 w-full">
                <label className="mb-2 block text-sm font-medium text-neutral-700">
                  Ask a question or modify the activity:
                </label>
                <div className="mb-2 flex gap-2">
                  <input
                    type="text"
                    value={cardPrompts[carouselIndex]}
                    onChange={e => handlePromptChange(e.target.value)}
                    className="focus:ring-primary-40 flex-1 rounded-lg border border-neutral-300 p-2 focus:ring-2 focus:outline-none"
                    placeholder="e.g., How can I make this more engaging?"
                  />
                  <Button
                    onClick={handleAskQuestion}
                    variant="secondary"
                    size="sm"
                    className="rounded-lg px-4 py-2 transition-all"
                    disabled={!cardPrompts[carouselIndex]?.trim()}
                  >
                    Ask
                  </Button>
                </div>
                {cardResponses[carouselIndex] && (
                  <div className="bg-primary-90 text-neutral-10 mt-2 rounded-lg p-3 text-sm">
                    {cardResponses[carouselIndex]}
                  </div>
                )}
              </div>
            </div>
          )}
        </div>
      </div>
      <AIHelpDialog />
    </div>
  )
}
